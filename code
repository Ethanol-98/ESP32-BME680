#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME680.h>
#include <WiFi.h>
#include <WebServer.h>
#include <WebSocketsServer.h>

// I2C pins for ESP32-D
#define I2C_SDA_PIN 21
#define I2C_SCL_PIN 22

// Wi-Fi AP credentials (password must be 8–63 chars)
const char* ap_ssid   = "Environment";
const char* ap_passwd = "ESP32pass";

// HTTP basic auth credentials
const char* www_username = "admin";
const char* www_password = "ESP32";

// BME680 sensor
Adafruit_BME680 bme;

// Web servers
WebServer httpServer(80);
WebSocketsServer wsServer(81);

// Interval for sensor updates (ms)
const unsigned long updateInterval = 2000;
unsigned long lastUpdate = 0;

// HTML page with WebSocket-based live charts
const char INDEX_HTML[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Environment Station</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; text-align: center; margin: 10px; }
    canvas { width: 100%; height: 120px; margin: 5px 0; }
    #time { color: #666; font-size: 12px; margin-top: 5px; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <canvas id="chartTemp"></canvas>
  <canvas id="chartHum"></canvas>
  <canvas id="chartPress"></canvas>
  <canvas id="chartGas"></canvas>
  <div id="time">--</div>
  <script>
    const maxPoints = 30;
    const options = { responsive:true, animation:{duration:0}, scales:{x:{display:false}, y:{beginAtZero:false}}};
    const ctxT = document.getElementById('chartTemp').getContext('2d');
    const ctxH = document.getElementById('chartHum').getContext('2d');
    const ctxP = document.getElementById('chartPress').getContext('2d');
    const ctxG = document.getElementById('chartGas').getContext('2d');
    const chartTemp = new Chart(ctxT, { type:'line', data:{ labels:[], datasets:[{ label:'Temp °F', data:[], fill:false, borderWidth:1 }]}, options});
    const chartHum  = new Chart(ctxH, { type:'line', data:{ labels:[], datasets:[{ label:'Humidity %', data:[], fill:false, borderWidth:1 }]}, options});
    const chartPress= new Chart(ctxP, { type:'line', data:{ labels:[], datasets:[{ label:'Pressure hPa', data:[], fill:false, borderWidth:1 }]}, options});
    const chartGas  = new Chart(ctxG, { type:'line', data:{ labels:[], datasets:[{ label:'Gas KΩ', data:[], fill:false, borderWidth:1 }]}, options});
    
    // Open WebSocket
    const ws = new WebSocket('ws://' + window.location.hostname + ':81/');
    ws.onmessage = event => {
      const d = JSON.parse(event.data);
      const t = new Date().toLocaleTimeString();
      document.getElementById('time').textContent = 'Updated: ' + t;
      [[chartTemp, d.tempF], [chartHum, d.hum], [chartPress, d.press], [chartGas, d.gas]].forEach(pair => {
        const [chart, val] = pair;
        chart.data.labels.push(t);
        chart.data.datasets[0].data.push(val);
        if (chart.data.labels.length > maxPoints) {
          chart.data.labels.shift();
          chart.data.datasets[0].data.shift();
        }
        chart.update();
      });
    };
  </script>
</body>
</html>
)rawliteral";

// Serve the HTML page
void handleRoot() {
  if (!httpServer.authenticate(www_username, www_password)) return httpServer.requestAuthentication();
  httpServer.send_P(200, "text/html", INDEX_HTML);
}

// Broadcast sensor data via WebSocket to all clients
void broadcastSensorData() {
  if (!bme.performReading()) return;
  float tF = bme.temperature * 9.0 / 5.0 + 32.0;
  float hum = bme.humidity;
  float press = bme.pressure / 100.0;
  float gas = bme.gas_resistance / 1000.0;
  String json = "{";
  json += "\"tempF\":" + String(tF, 2) + ",";
  json += "\"hum\":" + String(hum, 2) + ",";
  json += "\"press\":" + String(press, 2) + ",";
  json += "\"gas\":" + String(gas, 2);
  json += "}";
  wsServer.broadcastTXT(json);
}

void setup() {
  Serial.begin(115200);
  while (!Serial);
  Wire.begin(I2C_SDA_PIN, I2C_SCL_PIN);
  if (!bme.begin()) { Serial.println("BME680 not found!"); while (1); }
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150);

  WiFi.mode(WIFI_AP);
  WiFi.softAP(ap_ssid, ap_passwd);
  Serial.printf("AP %s @ %s\n", ap_ssid, WiFi.softAPIP().toString().c_str());

  httpServer.on("/", HTTP_GET, handleRoot);
  httpServer.begin();

  wsServer.begin();
  Serial.println("WebSocket server started on port 81");
}

void loop() {
  httpServer.handleClient();
  wsServer.loop();
  if (millis() - lastUpdate >= updateInterval) {
    lastUpdate = millis();
    broadcastSensorData();
  }
}
